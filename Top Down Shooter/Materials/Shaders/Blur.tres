[gd_resource type="Shader" format=3 uid="uid://oqgglsnd0whk"]

[resource]
resource_local_to_scene = true
code = "shader_type spatial;
render_mode unshaded;
uniform sampler2D albedo_texture: filter_nearest;
uniform int strength: hint_range(0, 512) = 2;
uniform float pixelation: hint_range(0.001,10) = .5;

vec4 blur_size(sampler2D tex,vec2 fragCoord, vec2 pixelSize) {
    
    vec4 color = vec4(0.,0.,0.,0.);
    float strengthFloat = float(strength);	

    vec2 pixel = fragCoord/pixelSize;
    int x_min = max(int(pixel.x-strengthFloat), 0);
    int x_max = min(int(pixel.x+strengthFloat), int(1./pixelSize.x));
    int y_min = max(int(pixel.y-strengthFloat), 0);
    int y_max = min(int(pixel.y+strengthFloat), int(1./pixelSize.y));

    int count =0;

    // Sum the pixels colors
    for(int x=x_min; x <= x_max; x++) {
        for(int y = y_min; y <= y_max; y++) {           
            color += texture(tex, vec2(float(x), float(y)) * pixelSize);
            count++;
        }
    }
    
    // Divide the color by the number of colors you summed up
    color /= float(count);
    
    return color;
}

void fragment() {
	vec4 color;
	if (strength == 0){
		color = texture(albedo_texture,UV);
	}else{
    	color = blur_size(albedo_texture,UV,pixelation/VIEWPORT_SIZE);
	}
	ALBEDO.rgb = color.rgb;
	ALPHA = color.a;
}"
